class AccessRule

-- related to which Entry point
-- affects which User
-- 
types



public AccessEvent = <YouShallNotPass> | <EnterMountDoom> | <ThatIDoNotKnow>;

public Target ::	users : set of User
									facilities : set of Facility
									timeRestriction : set of Date;
									

values
-- TODO Define values here
instance variables


	public userTarget : set of User;
	public facilityTarget : set of Facility;
	public accessEve : AccessEvent := <ThatIDoNotKnow>;
	public dateBegin : Date := new Date(0,0,0);
	public dateEnd : Date:= new Date(0,0,0);
	public priority : nat;
	public temporalConstraint : bool := false;


operations

-- FALTA id que identifique a regra para poder incluir excecoes relativas a uma regra. 
-- FALTA int de permissao. 
-- E isto e tudo indispensavel
		
--public AccessRule: (User|User`userGroup) * (Facility|seq of char) ==> ()
public AccessRule: set of User * set of Facility * AccessEvent * nat ==> AccessRule
	AccessRule(u,f,a, pri) ==(
	userTarget := u;
	facilityTarget := f;
	accessEve := a;
	priority := pri;
	return self
	);
	
public AccessRule: set of User * set of Facility * Date * Date * AccessEvent * nat ==> AccessRule
	AccessRule(u,f, d1, d2, a, pri) ==(
	userTarget := u;
	facilityTarget := f;
	accessEve := a;
	dateBegin := d1;
	dateEnd := d2;
	priority := pri;
	temporalConstraint := true;
	return self
	);

public getUserTarget: () ==> set of User 
	getUserTarget() ==(
	return userTarget;
	);
	
public searchUserInTarget: User ==> bool
	searchUserInTarget(u) == (
		if (u in set userTarget)
			then return true
			else return false
	);
	
public getPriority: () ==> nat
	getPriority() == (
	return priority
	);
	
public searchFacilityInTarget: Facility ==> bool
	searchFacilityInTarget(f) ==(
		if(f in set facilityTarget)
			then return true
			else return false
	);
--	public addExceptions;
-- ADD USER / FACILITY TO RULE
-- REMOVE USER / FACILITY FROM RULE

--TAMBEM NÃO ACHO QUE SEJA AQUI. O MAIS PROVAVEL É QUE SEJA ONDE FIZERMOS A DECISÃO 
-- Compara a Hora de abertura e hora de fecho com data actual. Se 
	public isOnOpeningHours : Date * Date * Date ==> bool
		isOnOpeningHours(opH,clH,currentDate) == (
		if (currentDate.hour < opH.hour or currentDate.hour > clH.hour 
				or (currentDate.hour = opH.hour and currentDate.minute < opH.minute) 
				or (currentDate.hour = clH.hour and currentDate.minute > clH.minute)) 
			then return false 
		else return true
		);

-- Compara o dia de semana de abertura e hora de fecho com a data actual. 
-- Utiliza os Ids atribuidos aos dias de semana para o fazer, {Segunda,..,Domingo} e {1,...,7}. 
-- Se dia de abertura tem um id > que id de fecho faz o complementar
-- Acrescentar dcl dlc dcl.
	public isOnOpeningWeekDays : Date * Date * Date ==> bool
		isOnOpeningWeekDays(opD, clD, currentDate) == (
		if(opD.getNameDayId() > clD.getNameDayId())
			then return (currentDate.getNameDayId() >= opD.getNameDayId() or currentDate.getNameDayId() <= clD.getNameDayId())
			else return (currentDate.getNameDayId() >= opD.getNameDayId() and currentDate.getNameDayId() <= clD.getNameDayId())
		); 

--mudar o lugar desta funções, fi-la da maneira errada
	public isInTimeInterval : Date * Date * Date ==> bool
		isInTimeInterval(startDate, expirationDate, currentDate) == (
		
		dcl hasStarted : bool := false;
		dcl hasEnded : bool := false;
		dcl onTime : bool := false; 
			
		if ((currentDate.year < startDate.year)or
			(currentDate.year = startDate.year and currentDate.month < startDate.month) or
				currentDate.year = startDate.year and currentDate.month = startDate.month and
				currentDate.day < startDate.day)
				then hasStarted := true
			else hasStarted := false;
			
		if ((currentDate.year > expirationDate.year)or
		(currentDate.year = expirationDate.year and currentDate.month > expirationDate.month) or
			currentDate.year = expirationDate.year and currentDate.month = expirationDate.month and
			currentDate.day > expirationDate.day)
			then hasEnded := false
		else hasEnded := true;
		
		if (hasStarted and hasEnded or startDate.year = 0)
			then onTime := true;
		
		return onTime;
		);
		
	
-- constructor, initializes the Rule

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end AccessRule