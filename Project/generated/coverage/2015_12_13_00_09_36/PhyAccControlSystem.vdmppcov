class PhyAccControlSystem
/*
  Contains the core model of the Physical Access Control System.
  Defines the variables and the operations available to the Control System Operator.
  FEUP, MFES, 2015/16.
*/
types
--Change to DenyAccess, Authorized, Indeterminate
AccessEvent = <YouShallNotPass> | <EnterMountDoom> | <ThatIDoNotKnow>;

--VAI HAVER AQUI CREATES QUE VAO MANDAR CENAS SEREM ATUALIZADAS A SEQUENCIAS. TALVEZ.
-- Tambem vai haver outra cena, mas agora nao me lembro o que.
values

instance variables

	public currentDate : Date;
	--private PolicyEntryPoints: map String to set of Rule := {|->};
	
	-- precisamos de todos os users para aceder a um em particular, cria-se um user, vê-se já existe
	private usersList: set of User := { };
	
	--precisamos do allCards para guardar todos, para encontrar um user e etc
	private allCards: set of AccessCard := {};
	
	--facto: o set of access rules e uma access policy 
	private AccessPolicy : seq of AccessRule := [];

		
	-- O que o log precisa no minimo, fazer um print aceitável disto
	private log : seq of (set of (Facility * AccessCard * Date)) := [];
	
	
operations

	public PhyAccControlSystem : Date ==> PhyAccControlSystem
		PhyAccControlSystem(d) == (
		currentDate := d;
			return self
		);
		-- Makes request sentence
	public requestAccess: AccessCard * Facility ==> bool
		requestAccess(c,f) ==(
			dcl enter : bool;
			dcl l :  AccessRule`AccessEvent;
			l :=  findRuleApplicable(c.getUserOfCard(), f, currentDate);
			if l = <ThatIDoNotKnow> or l = <YouShallNotPass>   then  enter:= false
			else if l = <EnterMountDoom> then  enter:= false;
			
			return enter;
		); 	
	
	public findRuleApplicable: User * Facility * Date ==> AccessRule`AccessEvent
		findRuleApplicable(u, f, d) == (
				dcl t : seq of AccessRule;
				dcl ret :  AccessRule`AccessEvent;
				t := filterWithUser(u, f);
				--percorre sequencia de rules e vê se a constricao temporal pinta, pode ser interrompido para analisar a lista de exceções da regra
				-- primeiro. Apartir do momento em que tem um true faz ret := r.accessEvent break.
				-- r.evaluateExceptionList(u, f, d)??
				return ret
		);
		
	public filterWithUser: User * Facility ==> seq of AccessRule
		filterWithUser(u, f) == (
			dcl t : seq of AccessRule:= filterWithFacility(f);
			dcl ret : seq of AccessRule := [];--vai receber as regras do grupo de seq  -- quando user = user da rule. ou user dentro dos grupos do user
			
			return ret
		);
		
		public filterWithFacility: Facility ==> seq of AccessRule
			filterWithFacility(f) == (
			dcl s : seq of AccessRule := AccessPolicy;
			return s  
			);

functions

traces
-- TODO Define Combinatorial Test Traces here
end PhyAccControlSystem